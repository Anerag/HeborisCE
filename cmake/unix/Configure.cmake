# Builds commandline program for some Unix-type platforms. The "Portable" package type supports creating distributable packages with CPack.

if(${PACKAGE_TYPE} STREQUAL WorkingDir)
	message(STATUS "Configuring working directory version; CMake installation is not supported")
	add_executable(${EXE} ${EXE_SOURCES})
	set(BASE_PATH [[SDL_strdup("./")]])
	set(BASE_PATH_APPEND [[""]])
	set(PREF_PATH [[SDL_strdup("./")]])
	configure_file("${SRC}/src/main_sdl/paths.h.in" "${BIN}/src/main_sdl/paths.h" @ONLY)
elseif(${PACKAGE_TYPE} STREQUAL Portable)
	message(STATUS "Configuring portable package")
	add_executable(${EXE} ${EXE_SOURCES})
	set(BASE_PATH "SDL_GetBasePath()")
	set(BASE_PATH_APPEND [[""]])
	set(PREF_PATH "SDL_GetBasePath()")
	configure_file("${SRC}/src/main_sdl/paths.h.in" "${BIN}/src/main_sdl/paths.h" @ONLY)
	install(TARGETS ${EXE} DESTINATION ${EXE})
	install(DIRECTORY "${SRC}/config/mission" "${SRC}/config/stage" DESTINATION "${EXE}/config")
	install(DIRECTORY "${SRC}/res" DESTINATION ${EXE})
	install(FILES "${SRC}/changelog.txt" "${SRC}/heboris.txt" "${SRC}/README.md" DESTINATION ${EXE})
elseif(${PACKAGE_TYPE} STREQUAL Installable)
	message(STATUS "Configuring installable package")
	add_executable(${EXE} ${EXE_SOURCES})
	set(BASE_PATH "SDL_GetBasePath()")
	set(PREF_PATH "SDL_GetPrefPath(\"nightmareci\", \"${EXE}\")")
	include(GNUInstallDirs REQUIRED)
	set(BASE_PATH_APPEND "\"../${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}\"")
	configure_file("${SRC}/src/main_sdl/paths.h.in" "${BIN}/src/main_sdl/paths.h" @ONLY)
	install(TARGETS ${EXE} DESTINATION "${CMAKE_INSTALL_BINDIR}")
	install(DIRECTORY "${SRC}/config/mission" "${SRC}/config/stage" DESTINATION "${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}/config")
	install(DIRECTORY "${SRC}/res" DESTINATION "${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}")
	install(FILES "${SRC}/README.md" DESTINATION "${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}")
	if(${BUILD_TARGET} STREQUAL Linux)
		set(LINUX_DESKTOP_ICON ${EXE} CACHE STRING "The file name of the icon to put into the Linux desktop file, without an extension.")
		configure_file("${SRC}/pkg/linux/${EXE}.desktop.in" "${BIN}/${EXE}.desktop" @ONLY)
		install(FILES "${BIN}/${EXE}.desktop" DESTINATION "${CMAKE_INSTALL_DATAROOTDIR}/applications")
		install(FILES "${SRC}/pkg/linux/${EXE}.png" DESTINATION "${CMAKE_INSTALL_DATAROOTDIR}/icons/hicolor/256x256/apps")
	endif()
else()
	message(FATAL_ERROR "Package type \"${PACKAGE_TYPE}\" unsupported; must be \"WorkingDir\", \"Portable\", or \"Installable\"")
endif()

option(ENABLE_LINUX_GPIO_INPUT "Enable input via GPIO (Linux only)" OFF)
if(${ENABLE_LINUX_GPIO_INPUT})
	if(${BUILD_TARGET} STREQUAL Linux)
		add_compile_definitions(LINUX_GPIO)
		target_link_libraries(${EXE} PRIVATE gpiod)
	else()
		message(FATAL_ERROR "\"ENABLE_LINUX_GPIO_INPUT\" is only supported when \"BUILD_TARGET\" is \"Linux\"")
	endif()
endif()

set_target_properties(${EXE}
	PROPERTIES
	RUNTIME_OUTPUT_DIRECTORY ${BIN}
)

include(${SRC}/cmake/unix/AddLibrariesPkgConfig.cmake REQUIRED)
AddLibrariesPkgConfig(${EXE})

if(${PACKAGE_TYPE} STREQUAL Portable)
	if(MINGW)
		include("${SRC}/cmake/unix/InstallRuntimeDependenciesMinGW.cmake" REQUIRED)
	elseif(${BUILD_TARGET} STREQUAL Darwin)
		include("${SRC}/cmake/unix/InstallRuntimeDependenciesMacOS.cmake" REQUIRED)
	elseif(${BUILD_TARGET} STREQUAL Linux)
		include("${SRC}/cmake/unix/InstallRuntimeDependenciesLinux.cmake" REQUIRED)
	endif()
endif()
